{{- /*
* Copyright (c) 2021, 2023 Contributors to the Eclipse Foundation
*
* See the NOTICE file(s) distributed with this work for additional
* information regarding copyright ownership.
*
* This program and the accompanying materials are made available under the
* terms of the Apache License, Version 2.0 which is available at
* https://www.apache.org/licenses/LICENSE-2.0.
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations
* under the License.
*
* SPDX-License-Identifier: Apache-2.0
*/}}

{{- if .Values.postgresql.enabled -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.postgresql.auth.existingSecret }}
  namespace: {{ .Release.Namespace }}
type: Opaque
# use lookup function to check if secret exists
{{- $secret := (lookup "v1" "Secret" .Release.Namespace .Values.postgresql.auth.existingSecret) }}
{{ if $secret -}}
data:
  # if secret exists, use value provided from values file (to cover update scenario) or existing value from secret
  # use data map instead of stringData to prevent base64 encoding of already base64-encoded existing value from secret
  # use index function for secret keys with hyphen otherwise '$secret.data.secretKey' works too
  postgres-password: {{ ( .Values.postgresql.auth.password | b64enc )  | default ( index $secret.data "postgres-password" ) }}
  replication-password: {{ ( .Values.postgresql.auth.replicationPassword | b64enc )  | default ( index $secret.data "replication-password" ) }}
  portal-password: {{ ( .Values.postgresql.auth.portalPassword | b64enc ) | default ( index $secret.data "portal-password" ) }}
  provisioning-password: {{ ( .Values.postgresql.auth.provisioningPassword | b64enc ) | default ( index $secret.data "provisioning-password" ) }}
{{ else -}}
stringData:
  # if secret doesn't exist, use provided value from values file or generate a random one
  postgres-password: {{ .Values.postgresql.auth.password | default ( randAlphaNum 32 ) | quote }}
  replication-password: {{ .Values.postgresql.auth.replicationPassword | default ( randAlphaNum 32 ) | quote }}
  portal-password: {{ .Values.postgresql.auth.portalPassword | default ( randAlphaNum 32 ) | quote }}
  provisioning-password: {{ .Values.postgresql.auth.provisioningPassword | default ( randAlphaNum 32 ) | quote }}
{{ end }}
{{- end -}}
